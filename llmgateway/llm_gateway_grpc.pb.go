// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: protos/llmgateway/llm_gateway.proto

package llmgateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LLMGatewayClient is the client API for LLMGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMGatewayClient interface {
	Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error)
	ChatCompletion(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error)
}

type lLMGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMGatewayClient(cc grpc.ClientConnInterface) LLMGatewayClient {
	return &lLMGatewayClient{cc}
}

func (c *lLMGatewayClient) Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	out := new(PromptResponse)
	err := c.cc.Invoke(ctx, "/mimer_agentic.llmgateway.LLMGateway/Prompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMGatewayClient) ChatCompletion(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error) {
	out := new(ChatCompletionResponse)
	err := c.cc.Invoke(ctx, "/mimer_agentic.llmgateway.LLMGateway/ChatCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMGatewayServer is the server API for LLMGateway service.
// All implementations must embed UnimplementedLLMGatewayServer
// for forward compatibility
type LLMGatewayServer interface {
	Prompt(context.Context, *PromptRequest) (*PromptResponse, error)
	ChatCompletion(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error)
	mustEmbedUnimplementedLLMGatewayServer()
}

// UnimplementedLLMGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedLLMGatewayServer struct {
}

func (UnimplementedLLMGatewayServer) Prompt(context.Context, *PromptRequest) (*PromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prompt not implemented")
}
func (UnimplementedLLMGatewayServer) ChatCompletion(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletion not implemented")
}
func (UnimplementedLLMGatewayServer) mustEmbedUnimplementedLLMGatewayServer() {}

// UnsafeLLMGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMGatewayServer will
// result in compilation errors.
type UnsafeLLMGatewayServer interface {
	mustEmbedUnimplementedLLMGatewayServer()
}

func RegisterLLMGatewayServer(s grpc.ServiceRegistrar, srv LLMGatewayServer) {
	s.RegisterService(&LLMGateway_ServiceDesc, srv)
}

func _LLMGateway_Prompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMGatewayServer).Prompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mimer_agentic.llmgateway.LLMGateway/Prompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMGatewayServer).Prompt(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMGateway_ChatCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMGatewayServer).ChatCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mimer_agentic.llmgateway.LLMGateway/ChatCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMGatewayServer).ChatCompletion(ctx, req.(*ChatCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMGateway_ServiceDesc is the grpc.ServiceDesc for LLMGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mimer_agentic.llmgateway.LLMGateway",
	HandlerType: (*LLMGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prompt",
			Handler:    _LLMGateway_Prompt_Handler,
		},
		{
			MethodName: "ChatCompletion",
			Handler:    _LLMGateway_ChatCompletion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/llmgateway/llm_gateway.proto",
}
